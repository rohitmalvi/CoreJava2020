Advanced java 

java can be divided into 3 models they are
1. jse-java standard edition
2. jee-java enterprise eidition
3. jme-java mobile edition

JNDI(java naming and directory interface).

any java class inside spring container is called spring bean.
how to create a spring bean : we have a two differenct scope to create a spring bean
1. singleton: by default spring is using singleton scope. it gives you only one object
even you are calling two times them also it is give you only one object. to check in bean
class create one constructor and call in main class multiple time it will give you only 
one output. if you are not calling them also it will give you one output. if you want 
multiple object use prototype.
2. prototype: @Scope(value="prototype") is create a bean as prototype means it will create
multiple object. it will execute when you are createing a object. ohterwise it is not creating 
multiple object.

@AUtowired:- using By type: if you want to search by name use @Qualifir("laptop").
@Qualifir: using by name: if you want to search by name use @Aualifire("laptop").

while working jsp add tomcate jasper jar in pom.xml. for displaying your jsp page.

for displaying jsp page using controller. in properties file use prfix and suffix.

for handlig null value we are using optional.

for fatchign a data from database by using emp name or other so that method is not available
in jpa repostiroy then we are creating a method in repository so we have to follow some
rules by creating a method.
1. name is start with {findBy} and after using properties name {Tech} findByTech(String tech);

if you want record which is greater than then you have to use method like. repo.findByAidGreaterThan(102);
you can try less than also.

if you want to write method which is findByTechSorted(String tech) then it is giving error so you
have to write your own query like @Query() and you can give your own query.

Query("from Alien where tech=?1 order by aname"):-jpql query

we can restrict json or xml by using prduces
@RequestMapping(Path="/aliens" ,produces= {"application/xml"})

if you wnat to send only json data not another formate you can use consumes
@PostMapping(Path="/alien", consumes={"application/json"})




















































































































































































































































































































































































































































































































































































